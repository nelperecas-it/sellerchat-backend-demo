using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using SCIABackendDemo.Models;
using SCIABackendDemo.Data;
using Serilog;
using SCIABackendDemo.Services;


namespace SCIABackendDemo.Controllers
{
    [ApiController]
    [Route("api/[controller]")]
    public class ScheduledCallController : ControllerBase
    {
        private readonly SellerCallDbContext _db;
        private readonly LlamadaService _llamadaService;

        public ScheduledCallController(SellerCallDbContext db, LlamadaService llamadaService)
        {
            _db = db;
             _llamadaService = llamadaService;
        }

        // POST: /api/scheduledcall/add
        [HttpPost("add")]
        public async Task<IActionResult> Add([FromBody] ScheduledCallDto dto)
        {
            try
            {
                var entity = new ScheduledCall
                {
                    UserId = dto.UserId,
                    CallId = Guid.NewGuid().ToString(),
                    PhoneNumber = dto.PhoneNumber,
                    ScheduledDate = dto.ScheduledDate,
                    Triggered = false,
                    AutoGenerated = false
                };

                _db.ScheduledCalls.Add(entity);
                await _db.SaveChangesAsync();

                return Ok(new { message = "Llamada programada exitosamente", entity.Id });
            }
            catch (Exception ex)
            {
                Log.Error(ex, "Error al programar llamada");
                return StatusCode(500, "Error interno al programar llamada");
            }
        }

        // GET: /api/scheduledcall/list
        [HttpGet("list")]
        public async Task<IActionResult> List()
        {
            var scheduled = await _db.ScheduledCalls
                .Where(c => !c.Triggered)
                .OrderBy(c => c.ScheduledDate)
                .ToListAsync();

            return Ok(scheduled);
        }

        // POST: /api/scheduledcall/cancel/5
        [HttpPost("cancel/{id}")]
        public async Task<IActionResult> Cancel(int id)
        {
            var call = await _db.ScheduledCalls.FindAsync(id);
            if (call == null)
                return NotFound();

            _db.ScheduledCalls.Remove(call);
            await _db.SaveChangesAsync();

            return Ok(new { message = "Llamada cancelada" });
        }

        // POST: /api/scheduledcall/edit/5
        [HttpPost("edit/{id}")]
        public async Task<IActionResult> Edit(int id, [FromBody] ScheduledCallDto dto)
        {
            var call = await _db.ScheduledCalls.FindAsync(id);
            if (call == null)
                return NotFound();

            call.PhoneNumber = dto.PhoneNumber;
            call.ScheduledDate = dto.ScheduledDate;

            await _db.SaveChangesAsync();
            return Ok(new { message = "Llamada actualizada" });
        }

        // POST: /api/scheduledcall/execute/5
        [HttpPost("execute/{id}")]
        public async Task<IActionResult> Ejecutar(int id)
        {
            var scheduled = await _db.ScheduledCalls.FirstOrDefaultAsync(s => s.Id == id && !s.Triggered);
            if (scheduled == null)
                return NotFound("Llamada no encontrada o ya ejecutada.");

            await _llamadaService.EjecutarLlamadaAsync(
                userId: scheduled.UserId,
                phone: scheduled.PhoneNumber,
                triggered: true,
                originalCallId: scheduled.CallId
            );

            return Ok("Llamada ejecutada.");
        }

    }

    public class ScheduledCallDto
    {
        public int UserId { get; set; }
        public string PhoneNumber { get; set; } = null!;
        public DateTime ScheduledDate { get; set; }
    }
}
